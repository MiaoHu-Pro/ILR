import numpy as np
import seaborn as sn
import pandas as pd
import py
import matplotlib.pyplot as plt

def convert2dataframe(recall_rate_results,order):
    data = []

    for method_name in order:
        recall_rate_matrix = recall_rate_results[method_name]
        for run_idx , rr in enumerate(recall_rate_matrix):
            for  k in range(1,21):
                data.append([method_name,run_idx, k, rr[k-1]])

    return pd.DataFrame(data, columns=['method','run', 'k', 'Recall Rate@k'])

def convert2dataframe_diff(recall_rate_results):
    data = []

    for method_name, recall_rate_matrix in recall_rate_results.items():
        recall_rate_matrix = np.round(recall_rate_matrix,2)
        row = [method_name]
        row.extend(recall_rate_matrix)
        data.append(row)

    return pd.DataFrame(data, columns=['Method'] + list(range(1,21)))


# RedHat
# recall_rate_res = {
# 'general relation (5441)': np.asarray([[0.51953125, 0.53125, 0.5546875, 0.58203125, 0.6015625, 0.6328125, 0.64453125, 0.65234375, 0.6796875, 0.6953125, 0.71875, 0.72265625, 0.73046875, 0.73828125, 0.74609375, 0.7578125, 0.76953125, 0.7734375, 0.7734375, 0.77734375, 0.77734375]
# ]),
# 'duplication (6223)': np.asarray([[0.8833333333333333, 0.9066666666666666, 0.9133333333333333, 0.9166666666666666, 0.93, 0.94, 0.9433333333333334, 0.9433333333333334, 0.95, 0.9533333333333334, 0.9566666666666667, 0.9566666666666667, 0.9566666666666667, 0.96, 0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.97, 0.97, 0.97, 0.9733333333333334]
# ]),
# 'temporal causal (6483)' : np.asarray([[0.5017182130584192, 0.5223367697594502, 0.5326460481099656, 0.5498281786941581, 0.5910652920962199, 0.6597938144329897, 0.6632302405498282, 0.6735395189003437, 0.6941580756013745, 0.7010309278350515, 0.7147766323024055, 0.7353951890034365, 0.7353951890034365, 0.7353951890034365, 0.738831615120275, 0.7491408934707904, 0.7491408934707904, 0.7525773195876289, 0.7525773195876289, 0.7560137457044673, 0.7594501718213058]
# ]),
# 'composition (2723)' : np.asarray([[0.39473684210526316, 0.42105263157894735, 0.43859649122807015, 0.4824561403508772, 0.5263157894736842, 0.5614035087719298, 0.5701754385964912, 0.5701754385964912, 0.5964912280701754, 0.6052631578947368, 0.6140350877192983, 0.6228070175438597, 0.6491228070175439, 0.6491228070175439, 0.6491228070175439, 0.6578947368421053, 0.6842105263157895, 0.6929824561403509, 0.6929824561403509, 0.6929824561403509, 0.7105263157894737]
# ]),
# 'workflow (463)' : np.asarray([[0.46153846153846156, 0.5, 0.5, 0.5, 0.5384615384615384, 0.5384615384615384, 0.5384615384615384, 0.5384615384615384, 0.5384615384615384, 0.5384615384615384, 0.5384615384615384, 0.5384615384615384, 0.5384615384615384, 0.5769230769230769, 0.5769230769230769, 0.5769230769230769, 0.5769230769230769, 0.5769230769230769, 0.5769230769230769, 0.6153846153846154, 0.6538461538461539]
# ])
# }
# # 0	temporal causal	6483
# # 1	duplication	6223
# # 2	general relation	5441
# # 3	composition	2723
# # 4	workflow	463

# JIRA
# recall_rate_res = {
# 'general relation (5029)': np.asarray([ [0.43853820598006643, 0.4485049833887043, 0.4883720930232558, 0.5249169435215947, 0.5614617940199336, 0.6079734219269103, 0.627906976744186, 0.654485049833887, 0.654485049833887, 0.6710963455149501, 0.6877076411960132, 0.6943521594684385, 0.707641196013289, 0.7209302325581395, 0.7308970099667774, 0.7342192691029901, 0.7408637873754153, 0.7541528239202658, 0.7674418604651163, 0.7774086378737541, 0.7840531561461794]
#
# ]),
# 'duplication (3351)': np.asarray([ [0.6735537190082644, 0.7107438016528925, 0.731404958677686, 0.743801652892562, 0.7603305785123967, 0.8057851239669421, 0.8057851239669421, 0.8099173553719008, 0.8264462809917356, 0.8347107438016529, 0.8388429752066116, 0.8512396694214877, 0.8636363636363636, 0.8677685950413223, 0.8842975206611571, 0.8925619834710744, 0.8966942148760331, 0.8966942148760331, 0.9049586776859504, 0.9090909090909091, 0.9132231404958677]
# ]),
# 'temporal causal (638)' : np.asarray([ [0.5116279069767442, 0.5116279069767442, 0.5348837209302325, 0.5348837209302325, 0.6046511627906976, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.6976744186046512, 0.7209302325581395, 0.7441860465116279, 0.7441860465116279, 0.7441860465116279, 0.7441860465116279, 0.7674418604651163, 0.7674418604651163, 0.7674418604651163, 0.7674418604651163, 0.7674418604651163, 0.7674418604651163, 0.7906976744186046]
# ]),
# 'composition (262)' : np.asarray([ [0.47058823529411764, 0.47058823529411764, 0.5294117647058824, 0.5294117647058824, 0.5294117647058824, 0.5294117647058824, 0.5294117647058824, 0.5294117647058824, 0.5882352941176471, 0.6470588235294118, 0.7058823529411765, 0.7058823529411765, 0.8235294117647058, 0.8235294117647058, 0.8235294117647058, 0.8235294117647058, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706]
# ]),
# 'workflow (359)' : np.asarray([ [0.5, 0.5416666666666666, 0.5416666666666666, 0.625, 0.625, 0.625, 0.6666666666666666, 0.6666666666666666, 0.7083333333333334, 0.75, 0.75, 0.75, 0.7916666666666666, 0.7916666666666666, 0.7916666666666666, 0.7916666666666666, 0.7916666666666666, 0.7916666666666666, 0.7916666666666666, 0.8333333333333334, 0.8333333333333334]
# ])
# }
# 0	general relation	5029
# 1	duplication	3351
# 2	temporal causal	638
# 3	workflow	359
# 4	composition	262


# MongoDB
# recall_rate_res = {
# 'general relation (4304)': np.asarray([[0.44208037825059104, 0.47044917257683216, 0.48936170212765956, 0.5130023640661938, 0.5319148936170213, 0.5791962174940898, 0.6004728132387707, 0.6122931442080378, 0.6217494089834515, 0.6335697399527187, 0.6548463356973995, 0.6619385342789598, 0.6690307328605201, 0.6737588652482269, 0.6855791962174941, 0.6903073286052009, 0.6973995271867612, 0.6997635933806147, 0.7021276595744681, 0.7044917257683215, 0.7115839243498818]
# ]),
# 'duplication (1544)': np.asarray([ [0.4666666666666667, 0.48333333333333334, 0.49166666666666664, 0.5166666666666667, 0.5416666666666666, 0.5833333333333334, 0.5833333333333334, 0.5833333333333334, 0.5916666666666667, 0.6, 0.6166666666666667, 0.6333333333333333, 0.6333333333333333, 0.6333333333333333, 0.6416666666666667, 0.6583333333333333, 0.6666666666666666, 0.6666666666666666, 0.6833333333333333, 0.7, 0.7166666666666667]]),
# 'temporal causal (3051)' : np.asarray([[0.47706422018348627, 0.5045871559633027, 0.5107033639143731, 0.5259938837920489, 0.5382262996941896, 0.5779816513761468, 0.5932721712538226, 0.6024464831804281, 0.6116207951070336, 0.6238532110091743, 0.6422018348623854, 0.6422018348623854, 0.6483180428134556, 0.6513761467889908, 0.654434250764526, 0.6636085626911316, 0.6697247706422018, 0.6758409785932722, 0.6788990825688074, 0.6819571865443425, 0.6880733944954128]
#  ]),
# 'composition (623)' : np.asarray([ [0.8115942028985508, 0.8115942028985508, 0.8115942028985508, 0.8115942028985508, 0.8260869565217391, 0.8260869565217391, 0.8260869565217391, 0.8260869565217391, 0.8260869565217391, 0.8260869565217391, 0.8260869565217391, 0.8260869565217391, 0.8405797101449275, 0.8405797101449275, 0.855072463768116, 0.855072463768116, 0.855072463768116, 0.855072463768116, 0.855072463768116, 0.8695652173913043, 0.8695652173913043]
#  ]),
# 'workflow (355)' : np.asarray([ [0.75, 0.7857142857142857, 0.8571428571428571, 0.8571428571428571, 0.8571428571428571, 0.8571428571428571, 0.8571428571428571, 0.8571428571428571, 0.8928571428571429, 0.8928571428571429, 0.8928571428571429, 0.8928571428571429, 0.8928571428571429, 0.8928571428571429, 0.8928571428571429, 0.8928571428571429, 0.8928571428571429, 0.8928571428571429, 0.8928571428571429, 0.8928571428571429, 0.9285714285714286]
# ])
# }

# 0	general relation	4304
# 1	temporal causal	3051
# 2	duplication	1544
# 3	composition	623
# 4	workflow	355



# Apache
recall_rate_res = {
'general relation (9955)': np.asarray([[0.48148148148148145, 0.5370370370370371, 0.5370370370370371, 0.5787037037037037, 0.5972222222222222, 0.6481481481481481, 0.6712962962962963, 0.6805555555555556, 0.6898148148148148, 0.6944444444444444, 0.7037037037037037, 0.7083333333333334, 0.7222222222222222, 0.7361111111111112, 0.7361111111111112, 0.7407407407407407, 0.75, 0.7546296296296297, 0.7685185185185185, 0.7777777777777778, 0.7824074074074074]
]),
'duplication (4313)': np.asarray([ [0.6575342465753424, 0.6712328767123288, 0.684931506849315, 0.684931506849315, 0.6986301369863014, 0.726027397260274, 0.7397260273972602, 0.7397260273972602, 0.7534246575342466, 0.7534246575342466, 0.7534246575342466, 0.7671232876712328, 0.7945205479452054, 0.7945205479452054, 0.7945205479452054, 0.7945205479452054, 0.7945205479452054, 0.7945205479452054, 0.7945205479452054, 0.7945205479452054, 0.7945205479452054]
]),
'temporal causal (5135)' : np.asarray([[0.48672566371681414, 0.5398230088495575, 0.5663716814159292, 0.5929203539823009, 0.6283185840707964, 0.6371681415929203, 0.6371681415929203, 0.6460176991150443, 0.6460176991150443, 0.6548672566371682, 0.6548672566371682, 0.6548672566371682, 0.6548672566371682, 0.6548672566371682, 0.6548672566371682, 0.6548672566371682, 0.6637168141592921, 0.6902654867256637, 0.6991150442477876, 0.6991150442477876, 0.6991150442477876]
]),
'composition (2545)' : np.asarray([ [0.44680851063829785, 0.46808510638297873, 0.46808510638297873, 0.5319148936170213, 0.5319148936170213, 0.5531914893617021, 0.574468085106383, 0.574468085106383, 0.5957446808510638, 0.6170212765957447, 0.6595744680851063, 0.6808510638297872, 0.6808510638297872, 0.6808510638297872, 0.6808510638297872, 0.6808510638297872, 0.7021276595744681, 0.7021276595744681, 0.7021276595744681, 0.7021276595744681, 0.723404255319149]
 ]),
'workflow (1874)' : np.asarray([ [0.20930232558139536, 0.32558139534883723, 0.37209302325581395, 0.4418604651162791, 0.4883720930232558, 0.4883720930232558, 0.5348837209302325, 0.5581395348837209, 0.5581395348837209, 0.5813953488372093, 0.5813953488372093, 0.5813953488372093, 0.5813953488372093, 0.5813953488372093, 0.6046511627906976, 0.6046511627906976, 0.6046511627906976, 0.6046511627906976, 0.627906976744186, 0.627906976744186, 0.627906976744186]
])
}




# 5
# 0	general relation	9955
# 1	temporal causal	5135
# 2	duplication	4313
# 3	composition	2545
# 4	workflow	1874

# QT
# recall_rate_res = {
# 'general relation (2243)': np.asarray([[0.39933993399339934, 0.40594059405940597, 0.41914191419141916, 0.44554455445544555, 0.45874587458745875, 0.49174917491749176, 0.49504950495049505, 0.5016501650165016, 0.5115511551155115, 0.5247524752475248, 0.5412541254125413, 0.5478547854785478, 0.5610561056105611, 0.570957095709571, 0.5775577557755776, 0.5808580858085809, 0.5973597359735974, 0.6105610561056105, 0.6237623762376238, 0.6303630363036303, 0.6303630363036303]]),
# 'duplication (1187)': np.asarray([[0.6305732484076433, 0.6496815286624203, 0.6496815286624203, 0.6624203821656051, 0.6751592356687898, 0.732484076433121, 0.7452229299363057, 0.7515923566878981, 0.7643312101910829, 0.7770700636942676, 0.7898089171974523, 0.802547770700637, 0.8089171974522293, 0.8152866242038217, 0.821656050955414, 0.8280254777070064, 0.8343949044585988, 0.8407643312101911, 0.8407643312101911, 0.8407643312101911, 0.8407643312101911]]),
# 'temporal causal (2423)' : np.asarray([[0.30791788856304986, 0.3460410557184751, 0.3812316715542522, 0.4046920821114369, 0.4252199413489736, 0.4574780058651026, 0.46920821114369504, 0.4897360703812317, 0.5073313782991202, 0.5190615835777126, 0.5483870967741935, 0.5571847507331378, 0.5659824046920822, 0.5777126099706745, 0.5894428152492669, 0.5982404692082112, 0.6070381231671554, 0.6099706744868035, 0.6129032258064516, 0.6187683284457478, 0.6275659824046921]]),
# 'composition (32)' : np.asarray([ [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0] ]),
# 'workflow (27)' : np.asarray([[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]])
# }

# 0	temporal causal	2423
# 1	general relation	2243
# 2	duplication	1187
# 3	composition	32
# 4	workflow	27




sn.set_style("ticks")
# "#00FFFF" "#4C72B0", "#DD8452", , "#937860", "#8C8C8C", "#C44E52", "#FF00FF", "#55A868", "#DD8452" ,
flatui = [ "#FF00FF", "blue","#C44E52", "red", "#55A868"]
sn.set_palette(sn.color_palette(flatui))

plt.figure(figsize=(9, 6))

order = ["general relation (9955)", "duplication (4313)", "temporal causal (5135)",
         "composition (2545)", "workflow (1874)"]

order.reverse()

k = list(range(1,21))
ax = sn.lineplot(x="k",y='Recall Rate@k',errorbar='sd',hue='method', style='method', markers=True, dashes=False, data=convert2dataframe(recall_rate_res,order))

import matplotlib.ticker as ticker
ax.xaxis.set_major_locator(ticker.MultipleLocator(1))
ax.xaxis.set_major_formatter(ticker.ScalarFormatter())
ax.yaxis.set_major_locator(ticker.MultipleLocator(0.05))
ax.yaxis.set_major_formatter(ticker.ScalarFormatter())

handles, labels = ax.get_legend_handles_labels()
ax.legend(handles=handles[0:], labels=labels[0:], loc='lower right')

ax.set(ylim=(0.1, 0.85))

fig = ax.get_figure()

fig.savefig("../experimental_result/apache_different_links.pdf", format='pdf', bbox_inches='tight', pad_inches=0)

fig.show()





